package frc.robot.subsystems;import com.ctre.phoenix.motorcontrol.can.WPI_TalonFX;import com.ctre.phoenix.motorcontrol.NeutralMode;import com.ctre.phoenix.motorcontrol.can.WPI_VictorSPX;import edu.wpi.first.math.controller.PIDController;import edu.wpi.first.util.sendable.SendableBuilder;import edu.wpi.first.wpilibj.DriverStation;import edu.wpi.first.wpilibj.drive.DifferentialDrive;import edu.wpi.first.wpilibj.motorcontrol.MotorControllerGroup;import edu.wpi.first.wpilibj2.command.SubsystemBase;import frc.robot.Constants;import frc.robot.RobotContainer;import frc.robot.sensors.Navx;import java.util.function.Consumer;public class Chassis extends SubsystemBase {public String joystickName = DriverStation.getJoystickName(0);private final WPI_TalonFX m_frontLeftDrive; private final WPI_TalonFX m_backLeftDrive;private final WPI_TalonFX m_backRightDrive;private final WPI_VictorSPX m_frontRightDrive; private final DifferentialDrive m_drive; private final MotorControllerGroup m_motorsRight; private final MotorControllerGroup m_motorsLeft; private final Navx m_navx = Navx.GetInstance();public Chassis() {m_frontLeftDrive = new WPI_TalonFX(Constants.CAN.frontLeftDrive);m_backLeftDrive = new WPI_TalonFX(Constants.CAN.backLeftDrive);m_backRightDrive = new WPI_TalonFX(Constants.CAN.backRightDrive);m_frontRightDrive = new WPI_VictorSPX(Constants.CAN.frontRightDrive);m_frontLeftDrive.configFactoryDefault();m_frontRightDrive.configFactoryDefault();m_backLeftDrive.configFactoryDefault();m_backRightDrive.configFactoryDefault();m_frontLeftDrive.configVoltageCompSaturation(Constants.Chassis.maxVoltage);m_frontRightDrive.configVoltageCompSaturation(Constants.Chassis.maxVoltage);m_backLeftDrive.configVoltageCompSaturation(Constants.Chassis.maxVoltage);m_backRightDrive.configVoltageCompSaturation(Constants.Chassis.maxVoltage);m_frontLeftDrive.enableVoltageCompensation(true);m_frontRightDrive.enableVoltageCompensation(true);m_backLeftDrive.enableVoltageCompensation(true);m_backRightDrive.enableVoltageCompensation(true);m_frontRightDrive.setInverted(true);m_backRightDrive.setInverted(true);m_backLeftDrive.setInverted(false);m_frontLeftDrive.setInverted(false);m_motorsRight = new MotorControllerGroup(m_frontRightDrive, m_backRightDrive);m_motorsLeft = new MotorControllerGroup(m_frontLeftDrive, m_backLeftDrive);m_drive = new DifferentialDrive(m_motorsLeft, m_motorsRight);m_drive.setDeadband(Constants.Chassis.kDriveDeadband);m_drive.setSafetyEnabled(false);configureBrakeMode(true);}/** GENERAL METHODS**/public void driveArcade(double moveThrottle, double turnThrottle, boolean squaredInputs) {m_drive.arcadeDrive(moveThrottle, turnThrottle, squaredInputs);}public void configureBrakeMode(boolean brake) {if (brake) {m_frontLeftDrive.setNeutralMode(NeutralMode.Brake);m_frontRightDrive.setNeutralMode(NeutralMode.Brake);m_backLeftDrive.setNeutralMode(NeutralMode.Brake);m_backRightDrive.setNeutralMode(NeutralMode.Brake);} else {m_frontLeftDrive.setNeutralMode(NeutralMode.Coast);m_frontRightDrive.setNeutralMode(NeutralMode.Coast);m_backLeftDrive.setNeutralMode(NeutralMode.Coast);m_backRightDrive.setNeutralMode(NeutralMode.Coast);}}public void configRampRate(double maxRampRateSeconds) {m_frontRightDrive.configOpenloopRamp(maxRampRateSeconds);m_frontLeftDrive.configOpenloopRamp(maxRampRateSeconds);m_backRightDrive.configOpenloopRamp(maxRampRateSeconds);m_backLeftDrive.configOpenloopRamp(maxRampRateSeconds);}@Override public void periodic() {}@Override public void simulationPeriodic() {}}